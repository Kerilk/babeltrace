# The MIT License (MIT)
#
# Copyright (c) 2017 Philippe Proulx <pproulx@efficios.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

__version__ = '@PACKAGE_VERSION@'


from bt2.clock_class import ClockClassOffset
from bt2.clock_snapshot import _ClockSnapshot
from bt2.clock_snapshot import _UnknownClockSnapshot
from bt2.component import _SourceComponentClass
from bt2.component import _FilterComponentClass
from bt2.component import _SinkComponentClass
from bt2.component import _SourceComponent
from bt2.component import _FilterComponent
from bt2.component import _SinkComponent
from bt2.component import _UserSourceComponent
from bt2.component import _UserFilterComponent
from bt2.component import _UserSinkComponent
from bt2.error import ComponentClassType
from bt2.error import _ErrorCause
from bt2.error import _ComponentErrorCause
from bt2.error import _ComponentClassErrorCause
from bt2.error import _MessageIteratorErrorCause
from bt2.error import _Error
from bt2.event_class import EventClassLogLevel
from bt2.field import _IntegerField
from bt2.field import _UnsignedIntegerField
from bt2.field import _SignedIntegerField
from bt2.field import _RealField
from bt2.field import _EnumerationField
from bt2.field import _UnsignedEnumerationField
from bt2.field import _SignedEnumerationField
from bt2.field import _StringField
from bt2.field import _StructureField
from bt2.field import _VariantField
from bt2.field import _ArrayField
from bt2.field import _StaticArrayField
from bt2.field import _DynamicArrayField
from bt2.field_class import IntegerDisplayBase
from bt2.field_class import _IntegerFieldClass
from bt2.field_class import _UnsignedIntegerFieldClass
from bt2.field_class import _SignedIntegerFieldClass
from bt2.field_class import _RealFieldClass
from bt2.field_class import _EnumerationFieldClass
from bt2.field_class import _UnsignedEnumerationFieldClass
from bt2.field_class import _SignedEnumerationFieldClass
from bt2.field_class import _StringFieldClass
from bt2.field_class import _StructureFieldClass
from bt2.field_class import _VariantFieldClass
from bt2.field_class import _VariantFieldClassWithoutSelector
from bt2.field_class import _VariantFieldClassWithSelector
from bt2.field_class import _VariantFieldClassWithUnsignedSelector
from bt2.field_class import _VariantFieldClassWithSignedSelector
from bt2.field_class import _ArrayFieldClass
from bt2.field_class import _StaticArrayFieldClass
from bt2.field_class import _DynamicArrayFieldClass
from bt2.field_path import Scope
from bt2.field_path import _IndexFieldPathItem
from bt2.field_path import _CurrentArrayElementFieldPathItem
from bt2.graph import Graph
from bt2.integer_range_set import SignedIntegerRange
from bt2.integer_range_set import UnsignedIntegerRange
from bt2.integer_range_set import SignedIntegerRangeSet
from bt2.integer_range_set import UnsignedIntegerRangeSet
from bt2.interrupter import Interrupter
from bt2.logging import LoggingLevel
from bt2.logging import get_minimal_logging_level
from bt2.logging import get_global_logging_level
from bt2.logging import set_global_logging_level
from bt2.message import _EventMessage
from bt2.message import _PacketBeginningMessage
from bt2.message import _PacketEndMessage
from bt2.message import _StreamBeginningMessage
from bt2.message import _StreamEndMessage
from bt2.message import _MessageIteratorInactivityMessage
from bt2.message import _DiscardedEventsMessage
from bt2.message import _DiscardedPacketsMessage
from bt2.message_iterator import _UserMessageIterator
from bt2.plugin import find_plugins_in_path
from bt2.plugin import find_plugins
from bt2.plugin import find_plugin
from bt2.py_plugin import plugin_component_class
from bt2.py_plugin import register_plugin
from bt2.query_executor import QueryExecutor
from bt2.trace_collection_message_iterator import ComponentSpec
from bt2.trace_collection_message_iterator import TraceCollectionMessageIterator
from bt2.value import create_value
from bt2.value import BoolValue
from bt2.value import _IntegerValue
from bt2.value import UnsignedIntegerValue
from bt2.value import SignedIntegerValue
from bt2.value import RealValue
from bt2.value import StringValue
from bt2.value import ArrayValue
from bt2.value import MapValue


class _MemoryError(_Error):
    '''Raised when an operation fails due to memory issues.'''


class InvalidObject(Exception):
    pass


class OverflowError(OverflowError):
    pass


class TryAgain(Exception):
    pass


class Stop(StopIteration):
    pass


class IncompleteUserClass(Exception):
    pass


class _ListenerHandle:
    def __init__(self, listener_id, obj):
        self._listener_id = listener_id
        self._obj = obj


def _init_and_register_exit():
    import bt2.native_bt as _native_bt
    import atexit

    atexit.register(_native_bt.bt2_cc_exit_handler)
    version = (
        _native_bt.version_get_major(),
        _native_bt.version_get_minor(),
        _native_bt.version_get_patch(),
        _native_bt.version_get_extra(),
    )
    _native_bt.bt2_cc_init_from_bt2()


_init_and_register_exit()


try:
    del native_bt
except:
    pass
